<?php

namespace WP_Rocket\ThirdParty\Plugins;

use WP_Rocket\Admin\Options_Data;
use WP_Rocket\Event_Management\Subscriber_Interface;
use WP_Rocket\ThirdParty\ReturnTypesTrait;

class Jetpack implements Subscriber_Interface {

	use ReturnTypesTrait;

	/**
	 * Option instance.
	 *
	 * @var Options_Data
	 */
	protected $option;

	/**
	 * Instantiate class.
	 *
	 * @param Options_Data $option Option instance.
	 */
	public function __construct( Options_Data $option ) {
		$this->option = $option;
	}

	/**
	 * Subscribed events.
	 */
	public static function get_subscribed_events() {
		$events = [
			'deactivate_jetpack/jetpack.php' => [ 'remove_jetpack_cookie_law_mandatory_cookie', 11 ],
		];

		var_dump(
			[
				'jetback_installed' => class_exists( 'Jetpack' ),
				'jetpack_sitemap_uri' => function_exists( 'jetpack_sitemap_uri' ),
			]
		);

		if ( ! class_exists( 'Jetpack' ) ) {
			return $events;
		}

		var_dump(
			[
				'jetback_installed' => class_exists( 'Jetpack' ),
				'sitemap_module' => \Jetpack::is_module_active( 'sitemaps' ),
				'jetpack_sitemap_uri' => function_exists( 'jetpack_sitemap_uri' ),
				'jetpack_widgets' => \Jetpack::is_module_active( 'widgets' ),
			]
		);

		if ( \Jetpack::is_module_active( 'sitemaps' ) && function_exists( 'jetpack_sitemap_uri' ) ) {
			$events['rocket_first_install_options']   = 'add_jetpack_sitemap_option';
			$events['rocket_inputs_sanitize']         = 'jetpack_sitemap_option_sanitize';
			$events['rocket_sitemap_preload_list']    = 'add_jetpack_sitemap';
			$events['rocket_sitemap_preload_options'] = 'sitemap_preload_jetpack_option';
		}

		if ( \Jetpack::is_module_active( 'widgets' ) ) {
			$events['rocket_cache_mandatory_cookies'] = 'add_jetpack_cookie_law_mandatory_cookie';
			$events['rocket_htaccess_mod_rewrite']    = [ 'return_false', 76 ];
			$events['admin_init']                     = 'activate_jetpack_cookie_law';
		}

		return $events;
	}


	/**
	 * Remove cookies if Jetpack gets deactivated.
	 */
	public function remove_jetpack_cookie_law_mandatory_cookie() {
		remove_filter( 'rocket_htaccess_mod_rewrite', '__return_false', 76 );
		remove_filter( 'rocket_cache_mandatory_cookies', '_rocket_add_eu_cookie_law_mandatory_cookie' );

		// Update the WP Rocket rules on the .htaccess file.
		flush_rocket_htaccess();

		// Regenerate the config file.
		rocket_generate_config_file();

		// Delete our option.
		delete_option( 'rocket_jetpack_eu_cookie_widget' );
	}

	/**
	 * Add Jetpack option to WP Rocket options
	 *
	 * @param Array $options WP Rocket options array.
	 * @return Array Updated WP Rocket options array
	 */
	public function add_jetpack_sitemap_option( $options ) {
		$options['jetpack_xml_sitemap'] = 0;

		return $options;
	}

	/**
	 * Sanitize jetpack option value
	 *
	 * @param Array $inputs Array of inputs values.
	 * @return Array Array of inputs values
	 */
	public function jetpack_sitemap_option_sanitize( $inputs ) {
		$inputs['jetpack_xml_sitemap'] = ! empty( $inputs['jetpack_xml_sitemap'] ) ? 1 : 0;

		return $inputs;
	}

	/**
	 * Add Jetpack sitemap to preload list
	 *
	 * @param Array $sitemaps Array of sitemaps to preload.
	 * @return Array Updated Array of sitemaps to preload
	 */
	public function add_jetpack_sitemap( $sitemaps ) {
		if ( $this->option->get( 'jetpack_xml_sitemap', false ) ) {
			$sitemaps['jetpack'] = jetpack_sitemap_uri();
		}

		return $sitemaps;
	}

	/**
	 * Add Jetpack sub-option to WP Rocket settings page
	 *
	 * @param Array $options WP Rocket options array.
	 * @return Array Updated WP Rocket options array
	 */
	public function sitemap_preload_jetpack_option( $options ) {
		$options[] = [
			'parent'       => 'sitemap_preload',
			'type'         => 'checkbox',
			'label'        => __( 'Jetpack XML Sitemaps', 'rocket' ),
			'label_for'    => 'jetpack_xml_sitemap',
			'label_screen' => sprintf( __( 'Preload the sitemap from the Jetpack plugin', 'rocket' ), 'Jetpack' ),
			'default'      => 0,
		];
		$options[] = [
			'parent'      => 'sitemap_preload',
			'type'        => 'helper_description',
			'name'        => 'jetpack_xml_sitemap_desc',
			// translators: %s = plugin name, e.g. Yoast SEO.
			'description' => sprintf( __( 'We automatically detected the sitemap generated by the %s plugin. You can check the option to preload it.', 'rocket' ), 'Jetpack' ),
		];

		return $options;
	}

	/**
	 * Add the EU Cookie Law to the list of mandatory cookies before generating caching files.
	 *
	 * @param array $cookies List of mandatory cookies.
	 */
	public function add_jetpack_cookie_law_mandatory_cookie( $cookies ) {
		$cookies['jetpack-eu-cookie-law'] = 'eucookielaw';

		return $cookies;
	}

	/**
	 * Add Jetpack cookie when:
	 *  - Jetpack is active.
	 *  - Jetpack's Extra Sidebar Widgets module is active.
	 *  - The widget is active.
	 *  - the rocket_jetpack_eu_cookie_widget option is empty or not set.
	 */
	public function activate_jetpack_cookie_law() {
		$rocket_jp_eu_cookie_widget = $this->option->get( 'rocket_jetpack_eu_cookie_widget' );

		if (
			is_active_widget( false, false, 'eu_cookie_law_widget' )
			&& empty( $rocket_jp_eu_cookie_widget )
		) {
			add_filter( 'rocket_htaccess_mod_rewrite', '__return_false', 76 );
			add_filter( 'rocket_cache_mandatory_cookies',  [ __CLASS__, 'add_jetpack_cookie_law_mandatory_cookie' ] );

			// Update the WP Rocket rules on the .htaccess file.
			flush_rocket_htaccess();

			// Regenerate the config file.
			rocket_generate_config_file();

			// Set the option, so this is not triggered again.
			update_option( 'rocket_jetpack_eu_cookie_widget', 1, true );
		}
	}
}
